---
author: "Research Data Management Support"
format: 
  revealjs:
    pagetitle: "Introduction to Computational Reproducibility"
    theme: styles/uu.scss
    logo: images/UU_logo_2021_EN_RGB.png
    footer: "Intro to Computational Reproducibility"
    menu: false
    progress: true
    width: 1920
    height: 1080
    margin: 0.1
    embed-resources: true
    slide-number: true
    navigation-mode: linear
    controls: true
    code-line-numbers: false
search: false
execute:
  enabled: false
  echo: true
---

# Introduction to Computational Reproducibility {data-background-color="#FFCD00"}

::: theme-section
<https://edu.nl/a4qwd>
:::

## Contents

::: theme-section
1.  What is reproducibility?
2.  Project organization
3.  Documentation
4.  Code quality
5.  Git and GitHub
6.  Resources
:::

# 1. What is reproducibility?

## Reproducibility

> A result is reproducible when the same analysis steps performed on the same dataset consistently produces the same answer. ([The Turing Way Community, 2022](https://book.the-turing-way.org/reproducible-research/overview/overview-definitions))

![](images/reproducibility_def_Scriberia-TuringWay.jpg){fig-align="center" width="70%"}

::: footer
The image was created by [Scriberia](http://www.scriberia.co.uk/) for The Turing Way community and is used under a CC-BY licence. <https://doi.org/10.5281/zenodo.3332808>.
:::

## Why reproducible code?

::: columns
::: {.column width="70%"}
-   Know what you did last summer (without having to memorize it)
-   Trust that your results are reliable and correct
-   Others can re-use your methods
-   Transparent science = trust in its results
:::

::: {.column width="30%"}
![](https://imgs.xkcd.com/comics/future_self.png)
:::
:::

::: footer
See also: Five selfish reasons to work reproducibly ([Markowetz, 2015](https://doi.org/10.1186/s13059-015-0850-7))
:::

## What is needed for reproducibility?

- üóÑÔ∏è The data

. . .

- üì∞ The code

. . .

- üßæ The analysis workflow

. . .

- üíª The dependencies to run the code on the data (operating system, software, packages, etc.)

. . .

-   üí¨ Documentation, documentation, documentation

## Reproducibility spectrum

![](images/peng2011_reproducibility-spectrum.jpg)

A study may be more or less reproducible than another depending on what data and code are made available ([Peng, 2011](https://doi.org/10.1126%2Fscience.1213847)).

# 2. Project organization

## Project structure

::: {.theme-section-large}
::: columns
::: {.column width="50%"}
#### Why?

- Easily find files
- Colleagues understand what you do
- Machine-readable files and folders (sorting, parsing)

:::

::: {.column width="50%"}
:::  {.fragment}

#### How?

- Folder structure
- File and folder naming
- Version control

:::
:::

:::
:::

## Folder structure

::: {.theme-section-large}

::: columns
::: {.column width="60%"}
- Put all project-related documents in 1 project folder
- Separate raw, intermediate and end outputs
- Never edit raw data
:::

::: {.column width="40%"}
```
‚îú‚îÄ‚îÄ‚îÄdata
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄraw
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄprocessed
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄtemp
‚îú‚îÄ‚îÄ‚îÄdocs
‚îú‚îÄ‚îÄ‚îÄresults
‚îÇ   ‚îú‚îÄ‚îÄ‚îÄfigures
‚îÇ   ‚îî‚îÄ‚îÄ‚îÄoutput
‚îú‚îÄ‚îÄ‚îÄsrc
‚îúREADME.md
‚îîLICENSE
```
:::
:::

:::

::: footer
Project templates: [UtrechtUniversity/simple-r-project](https://github.com/UtrechtUniversity/simple-r-project) (R), [UtrechtUniversity/simple-python-template](https://github.com/UtrechtUniversity/simple-python-template/) (Python)
:::

## File and folder naming

::: {.theme-section-large}

::: columns
::: {.column width="40%"}

- Meaningful & human-readable
- No special characters (`&` `%` `$` `#` `/` `,` `+`), spaces or dots (`.`)
- < 25 characters
- Separate meaningful chunks by `-` or `_`

:::

::: {.column width="60%"}
![](images/osf_human-readable-filenaming.png) 
<br>

![](images/osf_sortable-filenames.png)
:::
:::
:::
::: footer
Images: [OSF's File naming Guide](https://help.osf.io/article/146-file-naming)
:::

# 3. Documentation

## What is documentation?

> Documentation provides context for your work. It allows your collaborators, colleagues and future you to understand what has been done and why. ([The Turing Way Community, 2022](https://book.the-turing-way.org/reproducible-research/rdm/rdm-metadata.html))

. . .

For example:

- Project documentation (project proposal, analysis log, **README file**, etc.)

. . .

- Data documentation (e.g., codebook)

. . .

- Code documentation (e.g., **comments**, requirements.txt)

## README file

::: columns
::: {.column width="50%"}

#### Project information:

- Who, what, when, where?
- Files in the project folder
- License
- Contact details
:::

::: {.column width="50%"}
:::  {.fragment}

#### Code information:

- Dependencies
- Instructions for installation, configuration, usage
- Known bugs
- Troubleshooting

:::
:::
:::

::: footer
See Utrecht University's [FAIR code cheatsheet](https://utrechtuniversity.github.io/FAIR-Cheatsheets/) and <https://www.makeareadme.com/>
:::

## Comments

::: columns
::: {.column width="73%"}

Comments: annotations in your code that explain what your code does (to others, and your future self)

- No replacement for clear and structured code
- May be used to generate user documentation (if in specific format)
- In Python & R, use `#` :

    ```
    # This line is not executed
    print("Hello world") # This line is executed
    ``` 

:::

::: {.column width="27%"}

![](images/comments.jpeg)
:::
:::

::: footer
Image source: [Geek & Poke](https://geekandpoke.typepad.com/geekandpoke/2011/06/code-commenting-made-easy.html)
:::

# 4. Code quality

## Aspects of good quality code

:::: {.columns}

::: {.column width="45%"}

::: {style="text-align: left; margin-top: 2em"}

- Readable
- Reusable
- (Robust)

:::
:::
::: {.column width="0%"}
:::
::: {.column width="55%"}

![Source: [xkcd](https://xkcd.com/1513/)](https://imgs.xkcd.com/comics/good_code.png){fig-align="center" width=50%}

:::
::::

## Code readability: white space

::: {.theme-section}

::: {.fragment .strike}
Code is for computer, comments are for humans.
:::

- Use whitespace and newlines strategically.

<!-- ::: {.fragment .fade-in-then-out} -->

#### Compare:

:::: {.columns}

::: {.column width="60%"}

<!-- ::: {style="text-align: left; margin-top: 2em"} -->
```r
this <- function(arg1,arg2) res<-arg1*arg2;return(res)
hurts <- mean(c(this(3,4),this(3,1),this(9,9))); print(hurts)
```
:::

::: {.column width="40%"}


```r
this <- function(arg1,arg2){
  res <- arg1 * arg2
  return(res)
}

hurts <- mean(
  c(
    this(3,4),
    this(3,1),
    this(9,9)
    )
  )
print(hurts)
```

:::
::::
:::

<!-- ::: -->

## Code readability: names

::: {.theme-section}

- use descriptive names for functions and variables
  - start functions with a verb
  - make variable names _just_ long enough to be meaningful

#### Compare:
:::: {.columns}
::: {.column width="50%"}
```python
for i in my_shopping_basket:
  if(test(i)) > 10:
    purch(i)
  else:
    disc(i)
```
:::
::: {.column width="50%"}
```python
for item in basket:
  if(testNecessity(item)) > 10:
    purchase(item)
  else:
    discard(item)
```
:::
::::
:::

## Code readability: consistency

::: {.theme-section}
Consistency will make your code easier to understand and maintain

  - consult a styleguide for your language (keep conventions, and don't reinvent the wheel)
  - use tools to enforce style (linters, formatters)

<br>
<br>

|             | Python                                                                 | R                                      |
|---------------------|------------------------------------------------------------------------|----------------------------------------|
| Style Manual        | [Pep-8](https://www.python.org/dev/peps/pep-0008/)                     | [Tidyverse style guide](https://style.tidyverse.org) |
| Linters             | [flake8](https://flake8.pycqa.org/en/latest/), [pylint](https://pylint.pycqa.org/en/latest/) | [lintr](https://lintr.r-lib.org/)      |
| Formatters          | [black](https://pypi.org/project/black/)                               | [styler](https://styler.r-lib.org/)    |

: {.striped}

:::

## Code reusability: some guidelines

::: {.theme-section}

- **Separate code and data**: data is specific, code need not be

  - consider using a config file for project-specific (meta)data
  - but DO hard-code unchanging variables, e.g. `gravity = 9.80665`, **once**.

- **Do One Thing** (and do it well)

  - One function for one purpose
  - One script for one purpose 

Identify potential functions by action: functions perform tasks (e.g. sorting, plotting, saving a file, transform data...)

Code you reuse often, is often a good candidate for a function

:::

## Code quality: concluding remarks 

::: {.theme-section}

- Code quality is important for reproducibility
- Not only by others, but most importantly future YOU
- Invest time in learning to write good code, it will pay off

:::

# 5. Git and GitHub

## GitHub

## Why do you need version control?

::: {.theme-section}

:::: {.columns}

::: {.column width="40%"}

![](http://www.phdcomics.com/comics/archive/phd101212s.gif){width=80%}

:::
::: {.column width="20%"}
:::
::: {.column width="40%"}

<br> 

![](./images/final-git.png){width=100% fig-align="center"}

:::
::::
:::

## What is git?

::: {.theme-section}

:::: {.columns}

::: {.column width="60%"}

- Distributed Version Control system written by Linus Torvalds

- Allows you to:
  - log snapshots of your project
  - branch your work (so you can experiment without losing the original!)
  - keep all backups
  - while efficiently using your storage


- Current standard for code

:::
::: {.column width="5%"}
:::
::: {.column width="35%"}

![](./images/screenshots/distributed.png){fig-align="center" width=80%}

:::
::::
:::

## GitHub, GitLab, Bitbucket, etc..

::: {.theme-section}

:::: {.columns}

::: {.column width="60%"}

- GitHub is an online platform for hosting your coding projects
- Based on git
- Social coding platform: share, collaborate, and contribute to projects

- The UU has an [institutional GitHub](github.com/UtrechtUniversity)


:::
::: {.column width="5%"}
:::
::: {.column width="35%"}

![](./images/screenshots/distributed.png){fig-align="center" width=80%}

:::
::::
:::

## Terminology

::: {.theme-section}

- **Repository**: a project folder that is being tracked by git
- **Commit**: a snapshot of your project at a certain point in time
- **Branch**: a parallel version of your project
- **Clone**: a copy of a GitHub repository on your PC

:::

## Git History

![](./images/git-mermaid.png)

## Working with git

::: {.theme-section}
- Firstly designed as a command line tool
- Now also built into many IDEs (Rstudio, Visual Studio Code, etc.)
- GUIs available (GitHub Desktop, Sourcetree, etc.)
- Develop and run you code on your PC, regularly store your changes in git and push them to GitHub
- Making changes via the GitHub website is also possible
:::

## Your turn: starting with git

::: {.theme-section}
Learning to use git efficiently takes time and practice.
Take a course or workshop, or follow online tutorials to get started.
We will now do a short workshop to familiarize you with GitHub

edu.nl/TODO ADD LINK
:::

## Bonus: dissemination

- [Add a license](https://coderefinery.github.io/github-without-command-line/creating-using-web/#step-7-optional-adding-a-license-to-an-existing-repository) to your project

. . .

- Specify how people should [cite your code](https://citation-file-format.github.io/)

. . .

- Publish your [GitHub code on Zenodo](https://coderefinery.github.io/github-without-command-line/doi/) to get a DOI


## Resources

-   [Best Practices in Writing Reproducible Code](https://www.uu.nl/en/research/research-data-management/training-workshops/best-practices-for-writing-reproducible-code) (workshop)
-   [Programming Cafe](https://www.uu.nl/en/research/research-data-management/workshops/programming-cafe) (monthly)
-   [Walk-In Hours Research Data & Software](https://www.uu.nl/en/research/research-data-management/workshops/walk-in-hours-research-data-and-software) (weekly)

# Thank you! {data-background-color="#FFCD00"}

::: theme-section
<https://uu.nl/rdm>
:::
