[["index.html", "Best Practices in Writing Reproducible Code 1 Welcome!", " Best Practices in Writing Reproducible Code RDM Support, Utrecht University 2021-05-26 1 Welcome! Ensuring your research is reproducible can be a difficult task. Scripting your analysis is a start, but this in and of itself is no guarantee that you, or someone else, can faithfully repeat your work at a later stage. In this workshop, we will help you not only to make your work reproducible, but also to increase the efficiency of your workflow. We do this by teaching you a few good programming habits: how to set up a good project structure, how to code and comment well, and how to document your code so that it can be used by others. We will furthermore introduce you to Git and GitHub, which are essential tools in managing and publishing code. Reproducibility requires extra effort, but we will focus on teaching you skills that will save you much more time in the long run than they cost to implement. Our workshop material is licensed under a Creative Commons Attribution 4.0 International License. You can view the license here. "],["2-acknowledgements.html", "2 Acknowledgements", " 2 Acknowledgements This workshop was developed at Utrecht University, supported by Research Data Management (RDM) Support and the Open Science Community Utrecht (OSCU). The workshop is currently coordinated by Neha Moopen, with support from Bianca Kramer and Jacques Flores. The workshop has received contributions from (in alphabetical order): Armel Lefebvre Barbara Vreede Bianca Kramer Cedric Thieulot Erik van Sebille Jacques Flores Jeroen Bosman Jeroen Ooms Jonathan de Bruin Lukas van de Wiel Mateusz Kuzak Menno Fraters Neha Moopen Philippe Delandmeter Renato Alves "],["3-preparation.html", "3 Preparation", " 3 Preparation We have prepared the workshop as much as we could in a language-independent manner. That was not always possible, and where we are going into detail on tools and tricks we have done so catering to R and Python users. If you use a different language, you are very welcome to join our workshop, and we hope you will be able to help us add to the teaching materials with comparable tools you have found. Please go through this chapter carefully before the workshop, especially the sub-section on Git and the Final Test!. Its necessary to have Git working so you can go through the course (relatively) smoothly. "],["3-1-data-andor-code.html", "3.1 Data and/or Code", " 3.1 Data and/or Code Bring some code! We will be working on improving your workflow, so it is nice to have material to work with. Consider that we will need something that is small enough that you can edit/play with it during the workshop, but also comprehensive so that someone else may be able to reproduce your project on their computer (i.e.: it is nice if there is an output for someone to see at the end!). NB: If you will not have code to work on, you can still take advantage of the workshop, but please contact your instructor before the course. Optional: if your data cannot be public, fake it! We will be exchanging repositories at the end of the day, and try to reproduce each others work. This can be problematic if your data cannot be shared. If the structure of the data can be put online, you could simulate the dataset (including covariates, so simple models have similar outcomes) using a package like fakeR, which simulates fake data within the same structure. Or check out or this post on conjurer. "],["3-2-terminal.html", "3.2 Terminal", " 3.2 Terminal Some of the work we will do will take place over the command line, for which you will need a terminal. Mac OS and Linux have easily accessible terminals (the program is usually called Terminal, so thats easy). Windows default terminal (Command Prompt) uses different commands, so we do not recommend it for this workshop. Instead, as you install Git (next sub-section), you can get the Git Bash terminal with your installation. If you have no experience with the terminal at all, we recommend practicing with it for some basic folder navigation to start. This 8.5 minute video is a good introduction. "],["3-3-git.html", "3.3 Git", " 3.3 Git 3.3.1 Coding Platforms Sign up for a GitHub, GitLab, or BitBucket account. Please note our workshop materials and demonstrations will be in GitHub, but most things we will show you have easy parallels on the other networks, so you can likely just follow along. 3.3.2 Install Git You first want to double-check if Git is already installed on your computer. Go to your terminal and enter which git to request the path to your Git executable: which git ## /usr/local/bin/git and then git --version to see its version: git --version ## git version 2.31.1 If the terminal returns a path and version, that means you have Git and you can skip this installation step! That being said, you might want to ensure your Git is the latest version. If you dont see a path and version, but something like git: command not found - then you definitely need to continue with installation. Follow the the instructions relevant to your operating system. Windows: Go to gitforwindows.org. Make sure you include Git Bash in your installation! Mac: Go to git-scm.com and install the the latest version available. Linux: Go the Linux-specific page of git-scm.com. There are commands specific to various package managers. 3.3.3 git config Now that installation is done, its time to introduce yourself to Git! Go to your terminal and type the following, one after the other: git config --global user.name &#39;Your Name&#39; git config --global user.email &#39;yourname@example.com&#39; git config --global --list Important: make sure you use the email associated with your GitHub account! The first two commands wont return any information, the last one will confirm if Git received your introduction alright. That is, your name and email will be returned. 3.3.4 Set up SSH keys SSH keys provide a more secure way of logging onto servers than relying on passwords alone. Its similar to how two-factor authentication provides an extra layer of security over regular passwords/passcodes. There are number of steps involved in this setup, but were going to summarize it here - so you dont get lost: Check for existing SSH keys. Generate new SSH keys. Add private key to the ssh-agent. Add public key to your GitHub/GitLab/BitBucket account. Test your SSH connection. These instructions are borrowed heavily from Happy Git with R, GitHubs user guides, and NLeSC Small Scale Initiative - Introduction to GitVersion Control with Git. 3.3.4.1 Check for existing SSH keys. Go to your terminal and type the following command to list existing SSH keys: ls -al ~/.ssh If you have key pairs already, they may look like the following: id_rsa.pub (public key) &amp; id_rsa (private key) id_ecdsa.pub (public key) &amp; id_ecdsa (private key) id_ed25519.pub (public key) &amp; id_ed25519 (private key) If youre happy to stick with your existing keys, then you can jump to step 3 which is about adding the private key to the ssh-agent. 3.3.4.2 Generate new SSH keys Go to your terminal and type the following command, substituting USEFUL-LABEL with something like your GitHub username and/or your device. ssh-keygen -t ed25519 -C &quot;USEFUL-LABEL&quot; Accept the proposal to save the key in the default file location. Just press Enter here: &gt; Enter a file in which to save the key (/Users/you/.ssh/id_ed25519): [Press enter] If youre new to setting up SSH keys, then skip the option to enter a passphrase. Its a best practice, but you can come back to it after the workshop. Just leave the passphrase option empty and press Enter: &gt; Enter passphrase (empty for no passphrase): Heres an example of how it should have played out, if everything went smoothly: jenny@2015-mbp ~ $ ssh-keygen -t rsa -b 4096 -C &quot;USEFUL-COMMENT&quot; Generating public/private rsa key pair. Enter file in which to save the key (/Users/jenny/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /Users/jenny/.ssh/id_rsa. Your public key has been saved in /Users/jenny/.ssh/id_rsa.pub. The key fingerprint is: SHA256:ki0TNHm8qIvpH7/c0qQmdv2xxhYHCwlpn3+rVhKVeDo USEFUL-COMMENT The key&#39;s randomart image is: +---[RSA 4096]----+ | o+ . . | | .=.o . + | | ..= + + | | .+* E | | .= So = | | . +. = + | | o.. = ..* . | | o ++=.o =o. | | ..o.++o.=+. | +----[SHA256]-----+ 3.3.4.3 Add private key to the ssh-agent While the actions are similar, the specific commands for this step vary between operating systems. Therefore, well link you to the relevant GitHub guide for this step: Generating a new SSH key and adding it to the ssh-agent Make sure youre following the instructions for the right operating system and then jump to the sub-section on Adding your SSH key to the ssh-agent. Effectively, what this step does is to activate your private key. 3.3.4.4 Add public key to your GitHub/GitLab/BitBucket account Open your public SSH key (the file ending with .pub) in a text editor and copy the whole key. Make sure to avoid copying any newlines or whitespace. On GitHub, click on your profile picture and go to Settings -&gt; SSH &amp; GPG keys. Click on New SSH key. Paste your public key in the box and give it an informative label, maybe the same as the USEFUL-LABEL you used when generating the keys. 3.3.4.5 Test your SSH connection Open your terminal and type in the following command: ssh -T git@github.com You may see a warning which includes an RSA key fingerprint. Make sure this fingerprint matches that of GitHubs, you can double-check that here: GitHubs SSH key fingerprints If the fingerprint matches, type yes if you were asked if wanted to continue connecting. If all goes well, youll see something like the following: &gt; Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access. Make sure its your username that terminal returns! 3.3.4.6 Troubleshooting GitHub has a whole page on Troubleshooting SSH. If you run into issues, you should double-check if your errors are covered here. We have collected some commonly seen errors: You have made the key pair and copied the public key to GitHub, but SSH will not connect. Are you sure that you turned on the agent? You recieve an error message like Error: Permission denied (publickey). Follow the link to GitHub guide on this issue. Did you add the public key to GitHub? Toggle between SSH &amp; HTTPS Did you configure Mac OS Sierra or High Sierra to persistently store your passphrase in the keychain? You can run commands like ssh-keygen or eval, but they do not return any information, not even an error message. If you are on Windows and have have Citrix workspace installed, there is a known bug where Citrix interferes with the SSH key generation process. Uninstall Citrix workspace Restart your computer Restart the SSH key generation tutorial. If, after setting up SSH key pairs, you want to reinstall Citrix, be sure to do so via the Microsoft store. 3.3.5 If SSH fails, HTTPS! If you find yourself despairing over the SSH key setup, dont worry! HTTPS is a sufficient back-up! You will need to create a Personal Access Token from Github to identify yourself over the HTTPS protocol: Click on your profile icon (top right side of your screen) Go to Settings -&gt; Developer Settings -&gt; Personal Access Tokens Create a new token, and select the repo scope for its access. Copy the token and use it when Git asks for a password when connecting to Github. See the Github website for more info. 3.3.5.1 Troubleshooting Personal Access Tokens You can only view a Personal Access Token once, and they are impossible to type. However, you can store it in your system so it can be used to authenticate you without your having to re-enter it. If you are on Windows, go to the terminal and type git config --global credential.helper wincred If you are on a different system, and git does not cache your credentials automatically, here is a Github tutorial to fix that. "],["3-4-final-test.html", "3.4 Final Test!", " 3.4 Final Test! If youve set up your SSH keys alright, we can try going ahead and seeing whether you can push and pull from GitHub successfully. If youre going the HTTPS route due to issues, no worries! Just make sure your switch out the SSH clone URL for the HTTPS clone URL. This is something well do during the workshop as well, but trying it out beforehand reduces chances of errors while the course is ongoing. The sequence of steps is as follows: Create a test repository on GitHub. Clone the test repository. Make local changes. Push the local changes to GitHub. This is where the magic happens (or not)! If all went well, you can refresh the webpage with your GitHub repository and youll see your local changes. Make changes online. Pull the online changes to your computer, so your local repository is up to date. If all went well, then your online changes are available locally as well. It also means youre fully set up with Git &amp; GitHub! 3.4.0.1 Create a test repository on GitHub Log into GitHub. Click the green New (repository) button. You can name your repository as testrepo. Make sure its a Public repository. Click YES, when asked if you want to initialize the repository with a README. Click the green Create repository button. Copy the SSH URL for cloning via the green Clone or Download button. 3.4.0.2 Clone the test repository Go to your terminal and type the following command, substituting the SSH clone URL you copied in the previous step after git clone: git clone git@github.com:username/testrepo.git This should create a local copy of your repository as a folder with files contained within. 3.4.0.3 Make local changes Navigate to the folder of your repository and open the README file. Make an edit, such as This is a line Im adding offline to my local copy. Save the file and close it. 3.4.0.4 Push the local changes to GitHub Go to your terminal and type the following command(s): git add . This adds all changed files to a staging area. git commit -m &quot;insert-understandable-message-here&quot; Now youre officially committing the changes you made. You want to add a understandable commit message so you have a clear record of your changes. git push With this command, you push the local changes and commit message to your repository online. This is where errors can pop up if the SSH set-up didnt go as smoothly as expected. Troubleshoot the error messages the best you can! If everything went smoothly, you can refresh the webpage with GitHub repository and you should see that your changes have been synced. 3.4.0.5 Make changes online Now we want to go the other way around, open your README file on GitHub and make an edit online. You can do this by: Clicking on the README file and the pencil icon to open edit mode. Add a sentence to your README like This is a line Im adding from GitHub.com. When saving, youll have to provide a meaningful commit message again. 3.4.0.6 Pull from GitHub Now go to your terminal and type the following command: git pull If all goes well, youll see some activity in the terminal which suggests the changes are being downloaded. You can then check out your README file and see whether your online change has been synced. 3.4.0.7 Wrap-Up Did it work? You did it! You pushed and pulled from GitHub successfully, woohoo! "],["4-introduction.html", "4 Introduction", " 4 Introduction "],["4-1-schedule.html", "4.1 Schedule", " 4.1 Schedule 4.1.1 Pre-Workshop Installation Support Neha will be available the entire afternoon prior to Day 1 of the workshop to help with any installation issues, especially Git. 4.1.2 Day 1 Time Activity 8:00 Installation Support 9:00 Welcome &amp; introduction (slides) 9:30 Project setup &amp; version control with git 10:45 Questions &amp; discussion 11:00 Break 11:15 Code quality 12:45 Questions &amp; discussion 13:00 End 4.1.3 Day 2 Time Activity 9:00 Code quality discussion 9:15 Documentation 10:45 Questions &amp; discussion 11:00 Break 11:15 Accessibility &amp; reproducibility 12:15 Reproduction of projects 13:00 End "],["4-2-course-materials.html", "4.2 Course Materials", " 4.2 Course Materials 4.2.1 Slides Introduction Project setup and version control Code quality Project documentation Accessibility &amp; Reproducibility 4.2.2 Exercises Project setup &amp; version control with git Code quality Project documentation Accessibility &amp; reproducibility "],["5-project-management.html", "5 Project Management", " 5 Project Management This section covers the following topics: Setting up a folder structure Using git for version control Publishing your project on github Choosing a license Time for some hands-on practice! We have 3 short videos and accompanying exercises for you to go through one by one. Watch the video first, then apply the exercises to your own project. Use the slides linked above to follow links discussed in the video. Be sure to ask for help when you need it! "],["5-1-project-setup.html", "5.1 Project setup", " 5.1 Project setup 5.1.1 Video 5.1.2 Slides 5.1.3 Exercises NB: You can check the slides for more detail. Use cookiecutter to install a project structure in your system, following the video or these slides. If you have trouble with cookiecutter: use the instructions on this slide instead Take a look at the folder and files within it, to see where your answers to cookiecutter ended up! Place your project files in the right folder. Adjust paths in your code, and be sure to use relative paths! Does your code run in the new folder structure? "],["5-2-version-control.html", "5.2 Version control", " 5.2 Version control 5.2.1 Video 5.2.2 Slides 5.2.3 Exercise Follow the steps in the video (or on these slides) to turn your folder into a git repository. Make a remote version of your project on GitHub! Please note: are there (temporary) files you do not wish to track? Add them to the .gitignore file. Consider a .gitignore template for your language: examples on this github repo. Can you use Git and push to Github from your IDE? Experiment with editing and committing on GitHub itself. You can then download your code to your local repository using git pull. Optional: What happens if you edit the same file online and locally, and try to push/pull? (Hint: this often causes a merge conflict, which is no fun to experience. Going through it today means we can assist you if necessary!) "],["5-3-publication-licensing.html", "5.3 Publication &amp; licensing", " 5.3 Publication &amp; licensing 5.3.1 Video 5.3.2 Slides 5.3.3 Exercise Check the license in your project Take a look at other license options via choosealicense.com. Do you want to change your license? Go into your Github and change the LICENSE.md file. Dont forget to pull your remote changes! "],["6-code-quality.html", "6 Code Quality", " 6 Code Quality Lets start making our code readable and reusable! This section covers the following topics: code readability reusable code defensive programming Like the previous chapter, we have 3 short videos and accompanying exercises. Watch the video, then apply the exercises to your own project. Note: these exercises get you to work on your code in detail. Depending on how many issues you discover, it may take some time to refactor your code. Today, focus on identifying issues, and mark them with #TODO or equivalent, so you can find them later. We recommend spending a maximum of 20 minutes on each exercise. However, if you have time, do get started with refactoring your code! While code refactoring can be a time consuming exercise, it is also a great way to learn from your past mistakes, up your coding game, and significantly improve your code at the same time. Tip! Use #TODO or //TODO (depending on your comment marker) to easily find your tasks later on. Many IDEs extract these into a task list! The slides are linked below for reference, and be sure to ask for help when you need it! "],["6-1-readability.html", "6.1 Readability", " 6.1 Readability 6.1.1 Video 6.1.2 Slides 6.1.3 Exercise Use a linter to run through your code and identify style issues. Edit your code to improve the style compatibility, based on the feedback from your linter. If you work with Python, consider applying autopep8 to automatically fix linting issues. For the R users: a course participant found styler, which may do the same for R! If you find code that is hard to read, or variable names that need adjusting, make a note to work on it. (Again, use #TODO or another consistent label!) "],["6-2-reusability.html", "6.2 Reusability", " 6.2 Reusability 6.2.1 Video 6.2.2 Slides 6.2.3 Exercise Visualize your code. Use yellow for scripted code, purple for structured code (for-loops, functions, etc.), and green for comments Use any tool that works for you (powerpoint, word, paint, or good old pencils and paper) During this exercise, try to identify yellow parts that can be structured and turned into (a) function(s). Label them, or rewrite them if you have time. Make a screenshot or picture of your visualization, and share it on Teams! "],["6-3-robustness.html", "6.3 Robustness", " 6.3 Robustness 6.3.1 Video 6.3.2 Slides 6.3.3 Exercise Identify assumptions in your code What assumptions/expectations exist on your data or (user) input? What assumptions/expectations exist on the input of (a) function(s)? Based on the assumptions/expectations you were able to identify, work on increasing the robustness of your code. Choose one: Make the input/data assumptions explicit Option 1: Explicitly state assumptions on data or input in your README.md. Option 2: Write a piece of code that tests the validity of data/input, and reports an error if the expectations are not met. Test the input for a function. Modify the code inside your function to: check the value of the arguments passed to your function using if/else statements; raise an error in case an argument is out of the range of acceptable values. "],["7-documentation.html", "7 Documentation", " 7 Documentation Time for some documentation around your code! The following topics are covered: commenting code and functions (docstrings) writing a README file As usual, we have short videos and accompanying exercises. Watch the video, then apply the exercises to your own project. Use the slides linked above for reference, and be sure to ask for help when you need it! "],["7-1-comments-and-docstrings.html", "7.1 Comments and docstrings", " 7.1 Comments and docstrings 7.1.1 Video 7.1.2 Slides 7.1.3 Exercise Add a docstring to a function, preferably the last function you worked on (so its fresh in your memory). Keep in mind: what does my user need to know when they are working with this function? Grab a limited chunk of code to work on, and look at the existing comments. Can you replace a how comment with a why comment? Think: what is the purpose of this code? Rather than: this is how this code works. Are there elements in your chunk that are currently without comments that would benefit from clarification? Try to comment on the thought behind the code rather than simply translating its process in English. Can you delete superfluous comments or zombie code? "],["7-2-the-readme-page.html", "7.2 The README page", " 7.2 The README page 7.2.1 Video 7.2.2 Slides 7.2.3 Exercise Edit your README file. Take your time. This is important! Make sure to include the following information: What does your project do? How does the user access your project? (E.g. download, or clone with git clone) How does the user call the main script(s) that should be executed? And perhaps any other elements you are inspired to add (check out the examples!) Do you want to truly understand the importance of decent installation information? Read this experience by Elisabeth Bik, trying to install image forensics software. Look at the README of the software, and see what you can learn. NB: We will have another chance to take a look at dependencies and prerequisites, but if you have opportunity to add these here: please do! "],["8-accessibility-reproducibility.html", "8 Accessibility &amp; Reproducibility", " 8 Accessibility &amp; Reproducibility Last but not least, lets make our code accessible for others! The following topics are covered: obtaining a doi and ensuring accessibility dealing with requirements and dependencies Here are your last videos and accompanying exercises. Watch the video, then apply the exercises to your own project. Use the slides linked above for reference, and be sure to ask for help when you need it! "],["8-1-dependencies.html", "8.1 Dependencies", " 8.1 Dependencies 8.1.1 Video 8.1.2 Slides 8.1.3 Exercise Address dependencies and language versions in your README. What version of your coding language is required? Which packages does a user need to install before running your project? What versions? Can you provide their installation instructions? "],["8-2-binder.html", "8.2 Binder", " 8.2 Binder 8.2.1 Video 8.2.2 Exercise (optional) For R Generate a file called runtime.txt, either in the root of your project, or in a (hidden) folder called .binder/. Write in the file: r-2020-10-02  or specify the R version with r-3.6-2020-10-02. Write a file called install.R, in .binder/ or in root, and use it to write install code for your packages, e.g.: install.packages(&quot;ggplot2&quot;) install.packages(&quot;dplyr&quot;) Binderise your project by following the instructions via mybinder.org For Python Binder automatically loads Python 3.6. Add dependencies to your binder in the requirements.txt file like this: numpy==1.14.5 pandas==1.1.2 Binderise your project by following the instructions via mybinder.org "],["8-3-archiving.html", "8.3 Archiving", " 8.3 Archiving 8.3.1 Video 8.3.2 Slides 8.3.3 Exercise (optional) Follow the workflow outlined in this guide to archive your code to Zenodo. Use the Sandbox version of Zenodo to make sure your repository is not actually archived permanently! "],["9-references.html", "9 References", " 9 References Software Development Guide by the Netherlands eScience Center The Turing Way: a guide to reproducible data science by the Turing Institute Software Carpentry lessons Pro GIT Good Enough Practices in Scientific Computing Happy Git with R NLeSC Small Scale Initiative - Introduction to GitVersion Control with Git "]]
